{
	"info": {
		"_postman_id": "11224081-50df-4b69-9135-4ec8e7a8ee3f",
		"name": "Transaction- API Chaining",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37031452",
		"_collection_link": "https://joint5.postman.co/workspace/Joint-Workspace~085dbc61-2683-425c-b655-8fe84f4078e0/collection/36977130-11224081-50df-4b69-9135-4ec8e7a8ee3f?action=share&source=collection_link&creator=37031452"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "user login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var token = jsonData.token;\r",
									"pm.collectionVariables.set(\"token\", token)\r",
									"pm.environment.set(\"token\",token)\r",
									"\r",
									"pm.test(\"user logged in successfully\", function () {\r",
									"    \r",
									"    pm.expect(jsonData.message).to.contains(\"Login successfully\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "{{",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"admin@roadtocareer.net\",\r\n    \"password\":\"1234\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user login by wrong email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"user cannot login successfully with invalid ceredntials\", function () {\r",
									"    \r",
									"    pm.expect(jsonData.message).to.contains(\"User not found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"admin@roadcareer.net\",\r\n    \"password\":\"1234\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://dmoney.roadtocareer.net/user/login/",
							"protocol": "http",
							"host": [
								"dmoney",
								"roadtocareer",
								"net"
							],
							"path": [
								"user",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "User login by wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Wrong password\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contain(\"User not found\");\r",
									"});\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"admin@roadcareer.net\",\r\n    \"password\": \"12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Agent & Customer",
			"item": [
				{
					"name": "Create Agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();\r",
									"\r",
									"pm.test(\"Agent Account created succcessfully\", function () {\r",
									"    pm.expect(jsonData.message).to.contain(\"User created\");\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomid = _.random(1000,9999);\r",
									"pm.collectionVariables.set(\"agent_randomid\", randomid);\r",
									"var randomid2 = _.random(1000000,9999999);\r",
									"pm.collectionVariables.set(\"nid2\",randomid2);\r",
									"var prefix = \"0192\";\r",
									"var number = prefix+randomid2;\r",
									"pm.collectionVariables.set(\"agent_phone_number\", number);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"agent{{agent_randomid}}@test.com\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"{{agent_phone_number}}\",\r\n    \"nid\":\"1234{{agent_randomid}}\",\r\n    \"role\":\"Agent\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Customer 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var cpn= jsonData.user.phone_number;\r",
									"pm.collectionVariables.set(\"cus_phn_number1\", cpn);\r",
									"pm.test(\"Check the user is not created \", function () {\r",
									"    \r",
									"    pm.expect(jsonData.message).to.contains(\"User already exists\");\r",
									"\r",
									"});\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomid = _.random(10000,99999);\r",
									"pm.collectionVariables.set(\"customer_random\", randomid);\r",
									"var randomid2 = _.random(10000000,99999999);\r",
									"pm.collectionVariables.set(\"customer_random2\", randomid2);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"customer{{customer_random}}@test.com\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"012{{customer_random2}}\",\r\n    \"nid\":\"{{customer_random2}}\",\r\n    \"role\":\"Customer\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Customer 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Check the user is not created \", function () {\r",
									"    \r",
									"    pm.expect(jsonData.message).to.contains(\"User created\");\r",
									"\r",
									"});\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"var phn = jsonData.user.phone_number;\r",
									"pm.collectionVariables.set(\"cus_phn_number2\",phn);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomid = _.random(10000,99999);\r",
									"pm.collectionVariables.set(\"customer_random\", randomid);\r",
									"var randomid2 = _.random(10000000,99999999);\r",
									"pm.collectionVariables.set(\"customer_random2\", randomid2);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"customer{{customer_random}}@test.com\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"012{{customer_random2}}\",\r\n    \"nid\":\"{{customer_random2}}\",\r\n    \"role\":\"Customer\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "User creation using phone number containg text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Can't create user when phone number having text\", function () {\r",
									"     pm.expect(jsonData.user.phone_number).to.contain(\"phone  number contains digit not text\");\r",
									"});\r",
									"pm.test(\"Status code is 404\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomid = _.random(10000,99999);\r",
									"pm.collectionVariables.set(\"customer_random\", randomid);\r",
									"var randomid2 = _.random(10000000,99999999);\r",
									"pm.collectionVariables.set(\"customer_random2\", randomid2);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"customer{{customer_random}}@test.com\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"01c{{customer_random2}}\",\r\n    \"nid\":\"{{customer_random2}}\",\r\n    \"role\":\"Customer\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "User creation  leaving phone/email blank",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Can't create user when phone number having text\", function () {\r",
									"     pm.expect(jsonData.message).to.contain(\"Error creating user\");\r",
									"});\r",
									"pm.test(\"Status code is 500\", function(){\r",
									"    pm.response.to.have.status(500);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomid = _.random(10000,99999);\r",
									"pm.collectionVariables.set(\"customer_random\", randomid);\r",
									"var randomid2 = _.random(10000000,99999999);\r",
									"pm.collectionVariables.set(\"customer_random2\", randomid2);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"customer{{customer_random}}@test.com\",\r\n    \"password\":\"1234\",\r\n   \r\n    \"nid\":\"{{customer_random2}}\",\r\n    \"role\":\"Customer\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "User creation  leaving name/pass/nid/role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Can't create user when phone number having text\", function () {\r",
									"     pm.expect(jsonData.message).to.contain(\"Error creating user\");\r",
									"});\r",
									"pm.test(\"Status code is 404\", function(){\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomid = _.random(10000,99999);\r",
									"pm.collectionVariables.set(\"customer_random\", randomid);\r",
									"var randomid2 = _.random(10000000,99999999);\r",
									"pm.collectionVariables.set(\"customer_random2\", randomid2);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"customer{{customer_random}}@test.com\",\r\n    \"password\":\"1234\",\r\n   \r\n    \"nid\":\"{{customer_random2}}\",\r\n    \"role\":\"Customer\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search user",
			"item": [
				{
					"name": "search list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if the user is found \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contains(\"User found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "sec",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/search/id/8860",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"search",
								"id",
								"8860"
							]
						}
					},
					"response": []
				},
				{
					"name": "user list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.users[0].id).to.eql(195);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User P",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"Abul{{userid}}@test.com\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/update/{{userid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"update",
								"{{userid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete user",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/delete/8747",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"delete",
								"8747"
							]
						}
					},
					"response": []
				},
				{
					"name": "search list without token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"If no token found the user cannot get data \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.message).to.contains(\"No Token Found!\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text",
								"disabled": true
							},
							{
								"key": "sec",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/search/id/{{userid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"search",
								"id",
								"{{userid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "search list by unregistred id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if the user is not  found \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contains(\"User not found\");\r",
									"});\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "sec",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/search/id/101",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"search",
								"id",
								"101"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Mr. Ratul {{userid}} \",\r\n    \"email\":\"ratul@test.com\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"01747898710\",\r\n    \"nid\":\"123456998\",\r\n    \"role\":\"Customer\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/update/{{userid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"update",
								"{{userid}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "deposit to agent",
			"item": [
				{
					"name": "Deposit to Agent",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{agent_phone_number}}\",\r\n    \"amount\":2000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deposit to Invalid agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Deposit to invalidAgent Account \", function () {\r",
									"    pm.expect(jsonData.message).to.contain(\"Account does not exist\");\r",
									"});\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"1234560788\",\r\n    \"amount\":8000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deposit to Agent in deposit range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contain(\"Minimum deposit Amount 10 tk and maximum deposit amount 10000 tk\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{agent_phone_number}}\",\r\n    \"amount\":\"9\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deposit to Agent in deposit range maximum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contain(\"Insufficient balance\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"SYSTEM\",\r\n    \"to_account\":\"{{agent_phone_number}}\",\r\n    \"amount\":10000000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Deposit to customer",
			"item": [
				{
					"name": "deposit to customer from agent",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "can't deposit to customer from agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Can't deposit to invalid customer\", function () {\r",
									"    \r",
									"    pm.expect(jsonData.message).to.contain(\"Account does not exist\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\": \"{{agent_phone_number}}\",\r\n    \"to_account\": \"01235896417\",\r\n    \"amount\": 2000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "can't deposit to customer because of insufficient balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Can't deposit to invalid customer\", function () {\r",
									"    \r",
									"    pm.expect(jsonData.message).to.contain(\"Insufficient balance\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\": \"{{agent_phone_number}}\",\r\n    \"to_account\": \"{{cus_phn_number1}}\",\r\n    \"amount\": 10000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "can't deposit to customer because of deposit range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Can't deposit to invalid customer\", function () {\r",
									"    \r",
									"    pm.expect(jsonData.message).to.contain(\"Minimum deposit amount 10 tk and maximum deposit amount 10000 tk\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\": \"{{agent_phone_number}}\",\r\n    \"to_account\": \"{{cus_phn_number1}}\",\r\n    \"amount\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/deposit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check agent Balance",
			"item": [
				{
					"name": "Check agent Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.test(\"CHECKING AGENT BALANCE\", function () {\r",
									"    pm.expect(jsonData.message).to.contain(\"User balance\");\r",
									"});\r",
									"var agentB = jsonData.balance;\r",
									"pm.collectionVariables.set(\"agent_balance\", agentB);\r",
									"pm.test(\"Checking the balance\", function () {\r",
									"   \r",
									"    pm.expect(agentB).to.eql(pm.collectionVariables.get(\"agent_balance\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/{{agent_phone_number}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{agent_phone_number}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can't Check Agent Balance With Invalid Phone Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Can't Check Agent Balance With Invalid Phone Number\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contain(\"User not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/0195210",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"0195210"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Withdraw By Customer",
			"item": [
				{
					"name": "Withdraw By Customer",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\": \"{{cus_phn_number1}}\",\r\n    \"to_account\": \"{{agent_phone_number}}\",\r\n    \"amount\": 1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/withdraw",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"withdraw"
							]
						}
					},
					"response": []
				},
				{
					"name": "can't withdraw with invalid agent number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ca't depost to an invalid account\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contain(\"Account does not exist\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\": \"0169325871\",\r\n    \"to_account\": \"{{agent_phone_number}}\",\r\n    \"amount\": 1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/withdraw",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"withdraw"
							]
						}
					},
					"response": []
				},
				{
					"name": "can't withdraw for limitation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Restrict withdraw for outlimit\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contain(\"Minimum withdraw amount 10 tk\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\": \"{{cus_phn_number1}}\",\r\n    \"to_account\": \"{{agent_phone_number}}\",\r\n    \"amount\": 9\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/withdraw",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"withdraw"
							]
						}
					},
					"response": []
				},
				{
					"name": "can't withdraw for insufficient balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"can't withdraw for insufficient balance\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contain(\"Insufficient balance\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\": \"{{cus_phn_number1}}\",\r\n    \"to_account\": \"{{agent_phone_number}}\",\r\n    \"amount\": 1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/withdraw",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"withdraw"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check Customer Balance",
			"item": [
				{
					"name": "Check customer balance",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/{{cus_phn_number1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{cus_phn_number1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check invalid customer balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Checking Balance with Invalid Customer \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contain(\"User not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/0152359725",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"0152359725"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Send money",
			"item": [
				{
					"name": "Customer to Customer send Money",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Sending Money Between two Customer\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contain(\"Send money successful\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{cus_phn_number1}}\",\r\n    \"to_account\": \"{{cus_phn_number2}}\",\r\n    \"amount\": 100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/sendmoney",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"sendmoney"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can't send money to invalid customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\" Can't Send Money Between Invalid Customers\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contain(\"From/To Account does not exist\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"0163578924\",\r\n    \"to_account\": \"{{cus_phn_number2}}\",\r\n    \"amount\": 100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/sendmoney",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"sendmoney"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can't send money to customer 2 because of insufficient balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Can't send money customer 2 because of minimum amount range\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contain(\"Insufficient balance\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{cus_phn_number1}}\",\r\n    \"to_account\": \"{{cus_phn_number2}}\",\r\n    \"amount\": 100000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/sendmoney",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"sendmoney"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can't send between customer to agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Can't send money from customer to agent or merchant\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contain(\"From/To account should not be an agent account\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{cus_phn_number1}}\",\r\n    \"to_account\": \"{{agent_phone_number}}\",\r\n    \"amount\": 100000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/sendmoney",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"sendmoney"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can't send between same user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Can't send money between same logged in account\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contain(\"From account and to account cannot be same\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\":\"{{cus_phn_number1}}\",\r\n    \"to_account\": \"{{cus_phn_number1}}\",\r\n    \"amount\": 100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/sendmoney",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"sendmoney"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Payment To Merchant",
			"item": [
				{
					"name": "Pay to merchant By customer",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/merchant",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"merchant"
							]
						}
					},
					"response": []
				},
				{
					"name": "can't payment to invalid customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Can'y payment to ivalid customer\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contain(\"Account does not exist\");\r",
									"});\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\": \"{{cus_phn_number1}}\",\r\n    \"to_account\": \"0162594125\",\r\n    \"amount\": 100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/payment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"payment"
							]
						}
					},
					"response": []
				},
				{
					"name": "can't payment to merchant because of payment limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"can't payment to merchant because of payment limit\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contain(\"Minimum Payment amount 10 tk\");\r",
									"pm.test(\"Status code is 208\", function () {\r",
									"    pm.response.to.have.status(208);\r",
									"});\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\": \"{{cus_phn_number1}}\",\r\n    \"to_account\": \"01622519791\",\r\n    \"amount\":9\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/payment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"payment"
							]
						}
					},
					"response": []
				},
				{
					"name": "can't payment to merchant because of insufficient balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"can't payment to merchant because of insufficient balance\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contain(\"Minimum Payment amount 10 tk \");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\": \"{{cus_phn_number1}}\",\r\n    \"to_account\": \"0162594125\",\r\n    \"amount\":10000000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/payment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"payment"
							]
						}
					},
					"response": []
				},
				{
					"name": "can't payment to agent /customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"can't payment to agent /customer\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contain(\"Minimum Payment amount 10 tk \");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"from_account\": \"{{cus_phn_number1}}\",\r\n    \"to_account\": \"{{cus_phn_number2}}\",\r\n    \"amount\":100\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/transaction/payment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"payment"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check Customer Balance & statement",
			"item": [
				{
					"name": "Check Customer Balance",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/{{cus_phn_number1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{cus_phn_number1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check invalid Customer Balance",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/01256987412?",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"01256987412"
							],
							"query": [
								{
									"key": "",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Customer statement",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/statement/{{cus_phn_number1}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"statement",
								"{{cus_phn_number1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check invalid Customer statement",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/statement/01256987412",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"statement",
								"01256987412"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "check Merchant Balance",
			"item": [
				{
					"name": "Check Merchant Balance",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretkey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transaction/balance/01596843594",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transaction",
								"balance",
								"01596843594"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZGVudGlmaWVyIjoic2FsbWFuQHJvYWR0b2NhcmVlci5uZXQiLCJwYXNzd29yZCI6IjEyMzQiLCJpYXQiOjE3MjIxNDAzODksImV4cCI6MTcyMjE0Mzk4OX0.4GOv8OLaCwl8D9EUUGXbh_WSoUCrHOfqgQoD4zbMPHQ"
		},
		{
			"key": "baseUrl",
			"value": "http://dmoney.roadtocareer.net",
			"type": "string"
		},
		{
			"key": "secretkey",
			"value": "ROADTOSDET",
			"type": "string"
		},
		{
			"key": "phoneNumber",
			"value": "01202081254"
		},
		{
			"key": "userid",
			"value": 8756
		},
		{
			"key": "agent_randomid",
			"value": ""
		},
		{
			"key": "rid2",
			"value": ""
		},
		{
			"key": "agent_phone_number",
			"value": ""
		},
		{
			"key": "customer_random",
			"value": ""
		},
		{
			"key": "customer_random2",
			"value": ""
		},
		{
			"key": "cus_phn_number1",
			"value": ""
		},
		{
			"key": "cus_phn_number2",
			"value": ""
		},
		{
			"key": "nid2",
			"value": ""
		},
		{
			"key": "agent_balance",
			"value": ""
		}
	]
}